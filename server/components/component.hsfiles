{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             MIT
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2022{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
synopsis:            {{name}} Component for Haskell Admin
category:            {{category}}{{^category}}Haskell Admin, Remote Management{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- haskell-admin-core
- servant-server

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wpartial-fields
- -Wredundant-constraints

library:
  source-dirs: src

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec
    - hspec-wai

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
module Main where
import Test.Hspec

import qualified Spec.Admin.Component.MyComponent

main :: IO ()
main = hspec spec

spec :: Spec
spec = describe "Spec.Admin.Component.MyComponent" Spec.Admin.Component.MyComponent.spec

{-# START_FILE test/Spec/Admin/Component/MyComponent.hs #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}

module Spec.Admin.Component.MyComponent (spec) where

import Admin.Component.MyComponent
import Servant
import Test.Hspec
import Test.Hspec.Wai

app :: IO Application
app = return $ serve (Proxy @MyComponentAPI) serveMyComponent

spec :: Spec
spec =
  with app $ do
    describe "GET /greet" $ do
      it "responds with \"Hello World!\"" $ do
        get "/greet" `shouldRespondWith`
          200 {matchBody = "\"Hello World!\""}

{-# START_FILE src/Admin/Component/MyComponent.hs #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}

module Admin.Component.MyComponent
    ( MyComponentAPI
    , MyComponent
    , myComponent
    , serveMyComponent
    ) where

import Admin.Components
import Servant

type MyComponentAPI = "greet" :> Get '[ JSON] String

type MyComponent = Component "hello-world" MyComponentAPI

myComponent :: MyComponent
myComponent = Component {server = serveMyComponent}

serveMyComponent ::Server MyComponentAPI
serveMyComponent = return "Hello World!"


{-# START_FILE README.md #-}
# {{name}}

A server component for [Haskell Admin](https://github.com/martin-bednar/haskell-admin)

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

{-# START_FILE .gitignore #-}
.stack-work/
*~
